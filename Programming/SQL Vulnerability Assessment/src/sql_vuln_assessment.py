import sqlite3
import os

DB_NAME = "vulnerable_users.db"


def setup_database():
    # Initializes the SQLite database and creates a sample users table.
    if os.path.exists(DB_NAME):
        os.remove(DB_NAME)

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # Creates users table
    cursor.execute("""
        CREATE TABLE users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            password TEXT NOT NULL
        )
    """)

    # Inserts sample users
    users = [
        ("admin", "admin123"),
        ("user1", "pass1"),
        ("user2", "pass2"),
    ]
    cursor.executemany("INSERT INTO users (username, password) VALUES (?, ?)", users)
    conn.commit()
    conn.close()

    print("[+] Database setup complete with sample users.")


def vulnerable_login():
    """Simulates a vulnerable login prompt using insecure SQL string formatting."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    print("\n=== Vulnerable Login ===")
    username = input("Enter username: ")
    password = input("Enter password: ")

    # WARNING: This is vulnerable to SQL injection!
    query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
    print(f"\n[!] Executing SQL:\n{query}\n")

    try:
        cursor.execute(query)
        result = cursor.fetchone()
        if result:
            print("[+] Login successful!")
            print(f"    Welcome, {result[1]} (id: {result[0]})")
        else:
            print("[-] Login failed. Invalid credentials.")
    except sqlite3.Error as e:
        print(f"[!] SQLite error occurred: {e}")
    finally:
        conn.close()


def main():
    print("SQL Vulnerability Assessment Tool")
    while True:
        print("\nOptions:")
        print("1. Setup database")
        print("2. Attempt vulnerable login")
        print("3. Exit")
        choice = input("Enter your choice (1-3): ").strip()
        if choice == "1":
            setup_database()
        elif choice == "2":
            vulnerable_login()
        elif choice == "3":
            print("Exiting.")
            break
        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
