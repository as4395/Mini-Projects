#!/usr/bin/env python3

import subprocess
import argparse
import os
import shutil
import json
import requests

NUCLEI_URL = "https://api.github.com/repos/projectdiscovery/nuclei/releases/latest"
NUCLEI_BINARY = "nuclei"

# Install Nuclei binary if missing
def ensure_nuclei_installed():
    if shutil.which(NUCLEI_BINARY):
        return

    print("[*] Nuclei not found. Installing...")
    latest = requests.get(NUCLEI_URL).json()
    assets = latest.get("assets", [])

    # Find Linux 64-bit binary
    for asset in assets:
        if "linux-amd64" in asset["name"] and asset["name"].endswith(".zip"):
            download_url = asset["browser_download_url"]
            zip_path = "nuclei.zip"

            print(f"[*] Downloading from: {download_url}")
            with open(zip_path, "wb") as f:
                f.write(requests.get(download_url).content)

            subprocess.run(["unzip", zip_path])
            subprocess.run(["chmod", "+x", "nuclei"])
            subprocess.run(["mv", "nuclei", "/usr/local/bin/nuclei"])
            os.remove(zip_path)
            print("[+] Nuclei installed.")
            return

    print("[-] Failed to install Nuclei automatically. Please install manually.")
    exit(1)

# Update Nuclei templates
def update_templates():
    print("[*] Updating Nuclei templates...")
    subprocess.run([NUCLEI_BINARY, "-update-templates"], stdout=subprocess.DEVNULL)

# Run Nuclei scan
def run_scan(targets, output_file="nuclei_results.json"):
    cmd = [NUCLEI_BINARY, "-json", "-o", output_file]
    if isinstance(targets, list):
        with open("temp_targets.txt", "w") as f:
            f.writelines([t.strip() + "\n" for t in targets])
        cmd += ["-l", "temp_targets.txt"]
    else:
        cmd += ["-target", targets]

    print("[*] Running vulnerability scan...")
    subprocess.run(cmd)

# Parse results
def parse_results(output_file):
    print("[*] Parsing results...")
    if not os.path.exists(output_file):
        print("[-] No output file found.")
        return

    with open(output_file, "r") as f:
        for line in f:
            try:
                data = json.loads(line)
                severity = data.get("info", {}).get("severity", "").upper()
                name = data.get("info", {}).get("name", "")
                matched = data.get("matched-at", "")
                if severity in ["HIGH", "CRITICAL"]:
                    print(f"[{severity}] {name} -> {matched}")
            except json.JSONDecodeError:
                continue

# CLI entry point
def main():
    parser = argparse.ArgumentParser(description="Nuclei Vulnerability Scanner Wrapper")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-t", "--target", help="Single target IP/domain")
    group.add_argument("-f", "--file", help="File with list of targets")
    args = parser.parse_args()

    ensure_nuclei_installed()
    update_templates()

    targets = args.target if args.target else open(args.file).read().splitlines()
    run_scan(targets)
    parse_results("nuclei_results.json")

if __name__ == "__main__":
    main()
