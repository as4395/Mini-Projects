import argparse
import json
import sys
from ROPgadget.ropchain import ROPGadget

def find_rop_gadgets(binary_path, filter_keyword=None):
    # ROPGadget returns a dictionary of results when run in programmatic mode
    rop = ROPGadget(options={
        "binary": binary_path,
        "ropchain": False,
        "only": "exec",
        "badbytes": "",
        "nosys": True,
        "all": True
    })
    result = rop.analyze()
    gadgets = result.get("gadgets", [])
    
    if filter_keyword:
        gadgets = [g for g in gadgets if filter_keyword.lower() in g["gadget"].lower()]
    
    return gadgets

def print_gadgets(gadgets):
    for g in gadgets:
        print(f"{g['vaddr']:08x}: {g['gadget']}")

def main():
    parser = argparse.ArgumentParser(description="ROP Gadget Finder for ELF/PE binaries")
    parser.add_argument("--binary", required=True, help="Path to binary file")
    parser.add_argument("--filter", help="Filter gadgets by instruction (e.g., 'pop rdi')")
    parser.add_argument("--json", action="store_true", help="Output results in JSON format")
    
    args = parser.parse_args()
    try:
        gadgets = find_rop_gadgets(args.binary, args.filter)
        if args.json:
            print(json.dumps(gadgets, indent=2))
        else:
            if not gadgets:
                print("No ROP gadgets found.")
            else:
                print_gadgets(gadgets)
    except Exception as e:
        print(f"[!] Failed to analyze binary: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
