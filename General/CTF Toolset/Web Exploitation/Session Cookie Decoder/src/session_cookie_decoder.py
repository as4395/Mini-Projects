import sys
import base64
import json
import requests
import argparse
import jwt  # PyJWT is required for JSON Web Token decoding

def decode_base64(value: str):
    # Try to decode base64-encoded string, safely handling missing padding
    try:
        padded = value + '=' * (-len(value) % 4)
        return base64.b64decode(padded).decode('utf-8')
    except Exception:
        return None

def analyze_jwt(token: str):
    # Print decoded JWT header and payload
    try:
        header = jwt.get_unverified_header(token)
        payload = jwt.decode(token, options={"verify_signature": False})
        print("  JWT Header:", json.dumps(header, indent=2))
        print("  JWT Payload:", json.dumps(payload, indent=2))

        if header.get("alg", "").lower() == "none":
            print("  [!] Warning: 'alg' is set to 'none' â€” insecure token")
    except jwt.DecodeError:
        print("  [!] Not a valid JWT")

def analyze_cookie_value(value: str):
    print(f"Analyzing value: {value}")

    if value.count('.') == 2:
        print("Detected JWT structure.")
        analyze_jwt(value)
        return

    b64 = decode_base64(value)
    if b64:
        print("Base64 Decoded:")
        print("  ", b64)

        # Attempt to parse decoded string as JSON
        if b64.startswith("{") and b64.endswith("}"):
            try:
                parsed = json.loads(b64)
                print("Parsed JSON:")
                print(json.dumps(parsed, indent=2))
            except json.JSONDecodeError:
                pass
    else:
        print("Raw Value:")
        print("  ", value)

def fetch_cookies_from_url(url: str):
    try:
        response = requests.get(url, timeout=5)
        return response.cookies.get_dict()
    except requests.RequestException as e:
        print(f"[!] Failed to fetch cookies from {url}: {e}")
        return {}

def main():
    parser = argparse.ArgumentParser(description="Session Cookie Decoder")
    parser.add_argument("--url", help="URL to fetch cookies from")
    parser.add_argument("--cookie", help="Raw cookie string (e.g., 'key=value')")

    args = parser.parse_args()
    cookies = {}

    if args.url:
        print(f"[+] Fetching cookies from: {args.url}")
        cookies = fetch_cookies_from_url(args.url)

    elif args.cookie:
        try:
            key, value = args.cookie.split("=", 1)
            cookies[key] = value
        except ValueError:
            print("[-] Invalid cookie format. Use: key=value")
            sys.exit(1)
    else:
        print("[-] You must specify either --url or --cookie")
        sys.exit(1)

    for key, value in cookies.items():
        print(f"\n[+] Cookie: {key}")
        analyze_cookie_value(value)

if __name__ == "__main__":
    main()
